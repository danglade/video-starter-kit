// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Temporary user model - will be expanded with auth later
model User {
  id        String   @id @default(uuid())
  tempId    String   @unique // Temporary ID for development
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects   Project[]
  mediaItems MediaItem[]
}

model Project {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String   @default("")
  aspectRatio String   @default("16:9")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks     Track[]
  mediaItems MediaItem[]

  @@index([userId])
}

model Track {
  id        String   @id @default(uuid())
  projectId String
  locked    Boolean  @default(false)
  label     String
  type      String // "video" | "music" | "voiceover"
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  keyFrames KeyFrame[]

  @@index([projectId])
}

model KeyFrame {
  id        String   @id @default(uuid())
  trackId   String
  timestamp Int
  duration  Int
  data      Json // Store the KeyFrameData as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([trackId])
}

model MediaItem {
  id         String   @id @default(uuid())
  userId     String
  projectId  String
  kind       String // "generated" | "uploaded"
  endpointId String?
  requestId  String?
  mediaType  String // "image" | "video" | "music" | "voiceover"
  status     String // "pending" | "running" | "completed" | "failed"
  input      Json?
  output     Json?
  url        String?
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([createdAt])
}
