// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Temporary user model - will be expanded with auth later
model User {
  id        String   @id @default(uuid())
  tempId    String   @unique // Temporary ID for development
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects   Project[]
  mediaItems MediaItem[]
  characters Character[]
}

model Project {
  id           String   @id @default(uuid())
  userId       String
  title        String
  description  String   @default("")
  aspectRatio  String   @default("16:9")
  visualStyle  String?  // "shonen_tv" | "ghibli_soft" | "modern_manhwa" | "classic_ova"
  categories   String[] // Array of categories
  episodeCount Int?
  synopsis     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks     Track[]
  mediaItems MediaItem[]
  characters Character[]
  episodes   Episode[]

  @@index([userId])
}

model Track {
  id        String   @id @default(uuid())
  projectId String
  locked    Boolean  @default(false)
  label     String
  type      String // "video" | "music" | "voiceover"
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  keyFrames KeyFrame[]

  @@index([projectId])
}

model KeyFrame {
  id        String   @id @default(uuid())
  trackId   String
  timestamp Int
  duration  Int
  data      Json // Store the KeyFrameData as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([trackId])
}

model MediaItem {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  mediaType   String
  kind        String
  endpointId  String?
  requestId   String?
  status      String
  input       Json?
  output      Json?
  url         String?
  metadata    Json?
  
  @@index([userId])
  @@index([projectId])
}

model Character {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId       String?  // Optional - characters can be global to user or project-specific
  project         Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  loraUrl         String?  // The trained LoRA model URL
  thumbnailUrl    String?  // Preview image of the character
  trainingStatus  String   @default("pending") // pending, uploading, training, completed, failed
  trainingJobId   String?  // fal.ai job ID for tracking
  trainingImages  Json?    // Array of uploaded image URLs
  trainingError   String?  // Error message if training failed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
  @@index([projectId])
  @@index([trainingStatus])
}

model Episode {
  id            String   @id @default(uuid())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  episodeNumber Int
  title         String
  synopsis      String?
  duration      Int?     // Total duration in seconds
  status        String   @default("planning") // planning, storyboard, production, post_production, completed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  scenes        Scene[]
  
  @@index([projectId])
  @@unique([projectId, episodeNumber])
}

model Scene {
  id          String   @id @default(uuid())
  episodeId   String
  episode     Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  sceneNumber Int
  title       String
  description String?
  duration    Int?     // Duration in seconds
  sceneType   String   // action, dialogue, establishing, transition, montage
  mood        String?  // tense, happy, sad, exciting, calm, mysterious
  setting     String?  // Location/environment description
  status      String   @default("planned") // planned, generating, generated, approved
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  shots       Shot[]
  
  @@index([episodeId])
  @@unique([episodeId, sceneNumber])
}

model Shot {
  id             String   @id @default(uuid())
  sceneId        String
  scene          Scene    @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  shotNumber     Int
  duration       Int      // Duration in seconds
  cameraType     String   // wide, medium, close_up, extreme_close_up, establishing, pov, over_shoulder
  cameraMovement String?  // static, pan, tilt, zoom_in, zoom_out, tracking, dolly
  description    String?
  mediaId        String?  // Reference to generated video in MediaItem
  dialogueText   String?
  characterIds   String[] // Array of character IDs appearing in this shot
  status         String   @default("planned") // planned, generating, generated, approved
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([sceneId])
  @@unique([sceneId, shotNumber])
}
